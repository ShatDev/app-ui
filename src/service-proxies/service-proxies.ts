/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { ServiceProxyBase } from "service-proxies/service-proxy-base";
import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, from as _observableFrom, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import * as moment from 'moment';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class StakingPoolServiceProxy extends ServiceProxyBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5555";
    }

    getAll(chainId: number): Observable<StakingPoolDTO[]> {
        let url_ = this.baseUrl + "/api/StakingPool/getAll?";
        if (chainId === null)
            throw new Error("The parameter 'chainId' cannot be null.");
        else if (chainId !== undefined)
            url_ += "chainId=" + encodeURIComponent("" + chainId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<StakingPoolDTO[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<StakingPoolDTO[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<StakingPoolDTO[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(StakingPoolDTO.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StakingPoolDTO[]>(<any>null);
    }
}

@Injectable()
export class PaybackEventsServiceProxy extends ServiceProxyBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5555";
    }

    getMy(account: string): Observable<PaybackEventDTO[]> {
        let url_ = this.baseUrl + "/api/PaybackEvents/getMy?";
        if (account !== undefined && account !== null)
            url_ += "account=" + encodeURIComponent("" + account) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetMy(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMy(<any>response_);
                } catch (e) {
                    return <Observable<PaybackEventDTO[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<PaybackEventDTO[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetMy(response: HttpResponseBase): Observable<PaybackEventDTO[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(PaybackEventDTO.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaybackEventDTO[]>(<any>null);
    }
}

@Injectable()
export class TransitEventServiceProxy extends ServiceProxyBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5555";
    }

    getMy(account: string): Observable<TransitEventDTO[]> {
        let url_ = this.baseUrl + "/api/TransitEvent/getMy?";
        if (account !== undefined && account !== null)
            url_ += "account=" + encodeURIComponent("" + account) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetMy(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMy(<any>response_);
                } catch (e) {
                    return <Observable<TransitEventDTO[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<TransitEventDTO[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetMy(response: HttpResponseBase): Observable<TransitEventDTO[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(TransitEventDTO.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TransitEventDTO[]>(<any>null);
    }
}

@Injectable()
export class IdoPoolServiceProxy extends ServiceProxyBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5555";
    }

    getAll(chainId: number): Observable<StakingPoolDTO[]> {
        let url_ = this.baseUrl + "/api/IdoPool/getAll?";
        if (chainId === null)
            throw new Error("The parameter 'chainId' cannot be null.");
        else if (chainId !== undefined)
            url_ += "chainId=" + encodeURIComponent("" + chainId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<StakingPoolDTO[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<StakingPoolDTO[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<StakingPoolDTO[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(StakingPoolDTO.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StakingPoolDTO[]>(<any>null);
    }
}

export class StakingPoolDTO implements IStakingPoolDTO {
    transactionHash: string;
    chainId: number;
    blockNumber: number;
    ownerAddress: string;
    poolAddress: string;
    stakingToken: string;
    poolToken: string;
    startTime: number;
    finishTime: number;
    poolTokenAmount: string;
    stakingTokenDecimals: number;
    stakingTokenName: string;
    stakingTokenSymbol: string;
    poolTokenDecimals: number;
    poolTokenName: string;
    poolTokenSymbol: string;
    isBlockPool: boolean;

    constructor(data?: IStakingPoolDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.transactionHash = _data["transactionHash"];
            this.chainId = _data["chainId"];
            this.blockNumber = _data["blockNumber"];
            this.ownerAddress = _data["ownerAddress"];
            this.poolAddress = _data["poolAddress"];
            this.stakingToken = _data["stakingToken"];
            this.poolToken = _data["poolToken"];
            this.startTime = _data["startTime"];
            this.finishTime = _data["finishTime"];
            this.poolTokenAmount = _data["poolTokenAmount"];
            this.stakingTokenDecimals = _data["stakingTokenDecimals"];
            this.stakingTokenName = _data["stakingTokenName"];
            this.stakingTokenSymbol = _data["stakingTokenSymbol"];
            this.poolTokenDecimals = _data["poolTokenDecimals"];
            this.poolTokenName = _data["poolTokenName"];
            this.poolTokenSymbol = _data["poolTokenSymbol"];
            this.isBlockPool = _data["isBlockPool"];
        }
    }

    static fromJS(data: any): StakingPoolDTO {
        data = typeof data === 'object' ? data : {};
        let result = new StakingPoolDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transactionHash"] = this.transactionHash;
        data["chainId"] = this.chainId;
        data["blockNumber"] = this.blockNumber;
        data["ownerAddress"] = this.ownerAddress;
        data["poolAddress"] = this.poolAddress;
        data["stakingToken"] = this.stakingToken;
        data["poolToken"] = this.poolToken;
        data["startTime"] = this.startTime;
        data["finishTime"] = this.finishTime;
        data["poolTokenAmount"] = this.poolTokenAmount;
        data["stakingTokenDecimals"] = this.stakingTokenDecimals;
        data["stakingTokenName"] = this.stakingTokenName;
        data["stakingTokenSymbol"] = this.stakingTokenSymbol;
        data["poolTokenDecimals"] = this.poolTokenDecimals;
        data["poolTokenName"] = this.poolTokenName;
        data["poolTokenSymbol"] = this.poolTokenSymbol;
        data["isBlockPool"] = this.isBlockPool;
        return data; 
    }
}

export interface IStakingPoolDTO {
    transactionHash: string;
    chainId: number;
    blockNumber: number;
    ownerAddress: string;
    poolAddress: string;
    stakingToken: string;
    poolToken: string;
    startTime: number;
    finishTime: number;
    poolTokenAmount: string;
    stakingTokenDecimals: number;
    stakingTokenName: string;
    stakingTokenSymbol: string;
    poolTokenDecimals: number;
    poolTokenName: string;
    poolTokenSymbol: string;
    isBlockPool: boolean;
}

export class PaybackEventDTO implements IPaybackEventDTO {
    transactionHash: string;
    blockNumber: number;
    from: string;
    token: string;
    amount: string;
    tokenDecimals: number;
    tokenName: string;
    tokenSymbol: string;
    bscToken: string;
    bscTokenName: string;
    bscTokenSymbol: string;
    confirmationCount: number;
    isConfirmed: boolean;
    signature: string;
    isWithdraw: boolean;
    withdrawHash: string;

    constructor(data?: IPaybackEventDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.transactionHash = _data["transactionHash"];
            this.blockNumber = _data["blockNumber"];
            this.from = _data["from"];
            this.token = _data["token"];
            this.amount = _data["amount"];
            this.tokenDecimals = _data["tokenDecimals"];
            this.tokenName = _data["tokenName"];
            this.tokenSymbol = _data["tokenSymbol"];
            this.bscToken = _data["bscToken"];
            this.bscTokenName = _data["bscTokenName"];
            this.bscTokenSymbol = _data["bscTokenSymbol"];
            this.confirmationCount = _data["confirmationCount"];
            this.isConfirmed = _data["isConfirmed"];
            this.signature = _data["signature"];
            this.isWithdraw = _data["isWithdraw"];
            this.withdrawHash = _data["withdrawHash"];
        }
    }

    static fromJS(data: any): PaybackEventDTO {
        data = typeof data === 'object' ? data : {};
        let result = new PaybackEventDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transactionHash"] = this.transactionHash;
        data["blockNumber"] = this.blockNumber;
        data["from"] = this.from;
        data["token"] = this.token;
        data["amount"] = this.amount;
        data["tokenDecimals"] = this.tokenDecimals;
        data["tokenName"] = this.tokenName;
        data["tokenSymbol"] = this.tokenSymbol;
        data["bscToken"] = this.bscToken;
        data["bscTokenName"] = this.bscTokenName;
        data["bscTokenSymbol"] = this.bscTokenSymbol;
        data["confirmationCount"] = this.confirmationCount;
        data["isConfirmed"] = this.isConfirmed;
        data["signature"] = this.signature;
        data["isWithdraw"] = this.isWithdraw;
        data["withdrawHash"] = this.withdrawHash;
        return data; 
    }
}

export interface IPaybackEventDTO {
    transactionHash: string;
    blockNumber: number;
    from: string;
    token: string;
    amount: string;
    tokenDecimals: number;
    tokenName: string;
    tokenSymbol: string;
    bscToken: string;
    bscTokenName: string;
    bscTokenSymbol: string;
    confirmationCount: number;
    isConfirmed: boolean;
    signature: string;
    isWithdraw: boolean;
    withdrawHash: string;
}

export class TransitEventDTO implements ITransitEventDTO {
    transactionHash: string;
    blockNumber: number;
    from: string;
    token: string;
    amount: string;
    tokenDecimals: number;
    tokenName: string;
    tokenSymbol: string;
    bscToken: string;
    signedTokenDecimals: number;
    signedTokenName: string;
    signedTokenSymbol: string;
    confirmationCount: number;
    isConfirmed: boolean;
    signature: string;
    isWithdraw: boolean;
    withdrawHash: string;

    constructor(data?: ITransitEventDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.transactionHash = _data["transactionHash"];
            this.blockNumber = _data["blockNumber"];
            this.from = _data["from"];
            this.token = _data["token"];
            this.amount = _data["amount"];
            this.tokenDecimals = _data["tokenDecimals"];
            this.tokenName = _data["tokenName"];
            this.tokenSymbol = _data["tokenSymbol"];
            this.bscToken = _data["bscToken"];
            this.signedTokenDecimals = _data["signedTokenDecimals"];
            this.signedTokenName = _data["signedTokenName"];
            this.signedTokenSymbol = _data["signedTokenSymbol"];
            this.confirmationCount = _data["confirmationCount"];
            this.isConfirmed = _data["isConfirmed"];
            this.signature = _data["signature"];
            this.isWithdraw = _data["isWithdraw"];
            this.withdrawHash = _data["withdrawHash"];
        }
    }

    static fromJS(data: any): TransitEventDTO {
        data = typeof data === 'object' ? data : {};
        let result = new TransitEventDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transactionHash"] = this.transactionHash;
        data["blockNumber"] = this.blockNumber;
        data["from"] = this.from;
        data["token"] = this.token;
        data["amount"] = this.amount;
        data["tokenDecimals"] = this.tokenDecimals;
        data["tokenName"] = this.tokenName;
        data["tokenSymbol"] = this.tokenSymbol;
        data["bscToken"] = this.bscToken;
        data["signedTokenDecimals"] = this.signedTokenDecimals;
        data["signedTokenName"] = this.signedTokenName;
        data["signedTokenSymbol"] = this.signedTokenSymbol;
        data["confirmationCount"] = this.confirmationCount;
        data["isConfirmed"] = this.isConfirmed;
        data["signature"] = this.signature;
        data["isWithdraw"] = this.isWithdraw;
        data["withdrawHash"] = this.withdrawHash;
        return data; 
    }
}

export interface ITransitEventDTO {
    transactionHash: string;
    blockNumber: number;
    from: string;
    token: string;
    amount: string;
    tokenDecimals: number;
    tokenName: string;
    tokenSymbol: string;
    bscToken: string;
    signedTokenDecimals: number;
    signedTokenName: string;
    signedTokenSymbol: string;
    confirmationCount: number;
    isConfirmed: boolean;
    signature: string;
    isWithdraw: boolean;
    withdrawHash: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}